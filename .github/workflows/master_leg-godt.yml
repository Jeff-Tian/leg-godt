# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy ASP.Net Core app to Azure Web App - leg-godt

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Test with dotnet
        env:
          REDIS_HOST: localhost
          REDIS_PASSWORD: ""
        run: |
          dotnet test
          
          dotnet tool install --global SpecFlow.Plus.LivingDoc.CLI
          
          livingdoc test-assembly SpecFlowLegGodt/bin/Debug/net6.0/SpecFlowLegGodt.dll -t SpecFlowLegGodt/bin/Debug/net6.0/TestExecution.json
          
          ls .

  livingdoc:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Test with dotnet
        env:
          REDIS_HOST: localhost
          REDIS_PASSWORD: ""
        run: |
          dotnet test
          
          dotnet tool install --global SpecFlow.Plus.LivingDoc.CLI
          
          livingdoc test-assembly SpecFlowLegGodt/bin/Debug/net6.0/SpecFlowLegGodt.dll -t SpecFlowLegGodt/bin/Debug/net6.0/TestExecution.json
          
          ls .

      - name: Upload livingdoc for gh-pages
        uses: actions/upload-artifact@v2
        with:
          name: livingdoc
          path: .

  build:
    runs-on: windows-latest
    needs: test

    steps:
      - uses: actions/checkout@v2

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '8.0.x'
          include-prerelease: true

      - name: Build with dotnet
        run: dotnet build --configuration Release

      - name: dotnet publish
        run: dotnet publish -c Release -o ${{env.DOTNET_ROOT}}/myapp

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v2
        with:
          name: .net-app
          path: ${{env.DOTNET_ROOT}}/myapp

  gh-pages:
    runs-on: windows-latest
    needs: livingdoc

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v2
        with:
          name: livingdoc

      - name: List files
        run: |
          ls .

          mv LivingDoc.html index.html


      - name: Deploy to gh-pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./

  deploy:
    runs-on: windows-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v2
        with:
          name: .net-app

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'leg-godt'
          slot-name: 'Production'
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_D2B5A522F861461E951E2F595AEB159D }}
          package: .

  deploy-to-ssh-server:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v2
        with:
          name: .net-app

      - name: Copy files to the SSH server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "./"
          target: "/root/apps/leg-godt"

      - name: Restart .NET application on the SSH server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # 假设你已经有一个文件夹用来存放应用程序
            cd /root/apps/leg-godt
            
            # 停止现有服务，这取决于你如何运行你的应用程序
            # 如果你的服务是通过 systemd 管理的，你可以使用 systemctl 命令
            systemctl stop leg-godt
            
            # 这里我们假设 .net-app 是上传的构建工件的名称
            # 解压缩上传的工件
            unzip .net-app
            
            # 重新启动服务
            systemctl start leg-godt
